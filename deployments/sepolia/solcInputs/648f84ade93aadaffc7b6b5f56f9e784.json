{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/Raffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\";\n\n/**\n * What we want:\n *      People being able to buy-in\n *      Contract being able to pick a verifiable winner\n *      Winner to be selected automatically\n * What we need:\n *      Chainlink Oracle:\n *          Random\n *      Chainlink keepers\n *          Automation\n */\n\nerror Raffle__NotEnoughETH();\nerror Raffle__NotOpen();\nerror Raffle__TransferFailed();\nerror Raffle__UpkeepNotNeeded(\n\tuint256 currentBalance,\n\tuint256 playerCount,\n\tuint256 raffleState\n);\n\n/**\n * @title A sample raffle contract\n * @author V\n * @notice This contract is for creating an verifiable random decentralized smart contract\n * @dev This implements Chainlink VRF v2 and Chainlink keepers\n */\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\n\t/** Types */\n\tenum RaffleState {\n\t\tOPEN,\n\t\tCALCULATING\n\t} // Even it's of type `RaffleState`, it returns 0(`OPEN`), 1(`CALCULATING`), etc\n\n\t/** State variables */\n\tuint256 private immutable i_entranceFee;\n\t/** `address payable[]` initializes address[] that are payable(for the contract will have to pay the players) */\n\taddress payable[] private s_players;\n\tVRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n\tbytes32 private immutable i_gasLane;\n\tuint64 private immutable i_subscriptionId;\n\tuint16 private constant REQUEST_CONFIRMATIONS = 3;\n\tuint32 private immutable i_callbackGasLimit;\n\tuint32 private constant NUM_WORDS = 1;\n\n\t/** Lottery variables */\n\taddress private s_recentWinner;\n\tRaffleState private s_raffleState;\n\tuint256 private s_lastTimeStamp;\n\tuint256 private immutable i_interval;\n\n\t/** Events */\n\t// Naming practice: reversed action name(enterRaffle)\n\tevent RaffleEnter(address indexed player);\n\tevent RequestedRaffleWinner(uint256 indexed requestId);\n\tevent WinnerPicked(address indexed winner);\n\n\t/**\n\t * @dev `VRFConsumerBaseV2` is the constructor for parent contract(class), also called main constructor\n\t */\n\tconstructor(\n\t\taddress vrfCoordinatorV2, // Contract address -> Could use mocks\n\t\tuint256 entranceFee,\n\t\tbytes32 gasLane,\n\t\tuint64 subscriptionId,\n\t\tuint32 callbackGasLimit,\n\t\tuint256 interval\n\t) VRFConsumerBaseV2(vrfCoordinatorV2) {\n\t\ti_entranceFee = entranceFee;\n\t\ti_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n\t\ti_gasLane = gasLane;\n\t\ti_subscriptionId = subscriptionId;\n\t\ti_callbackGasLimit = callbackGasLimit;\n\t\ts_raffleState = RaffleState.OPEN; // Can also `RaffleState(0)`\n\t\ts_lastTimeStamp = block.timestamp;\n\t\ti_interval = interval;\n\t}\n\n\tfunction enterRaffle() public payable {\n\t\t/**\n\t\t * `msg.value` requires payable\n\t\t */\n\t\tif (msg.value < i_entranceFee) {\n\t\t\trevert Raffle__NotEnoughETH();\n\t\t}\n\n\t\tif (s_raffleState != RaffleState.OPEN) {\n\t\t\trevert Raffle__NotOpen();\n\t\t}\n\n\t\ts_players.push(payable(msg.sender));\n\n\t\t/** Events\n\t\t *      Whenever updating a dynamic object(arrays, mappings), we want to emit an event, very important for front end\n\t\t */\n\t\temit RaffleEnter(msg.sender);\n\t}\n\n\t/**\n\t * Automation logic\n\t * @dev `checkData` Really anything we want with the logic, with `bytes`, we can even call other functions,\n\t * \t\tThis is the function that Chainlink keeper nodes call, they look for `upkeepNeeded` to be `true`\n\t * \t\t\tTo return true:\n\t * \t\t\t\t1. Time interval should have passed\n\t * \t\t\t\t2. At least one player in pool with some ETH\n\t * \t\t\t\t3. Subscription needs to be funded with LINK\n\t * \t\t\t\t4. Lottery should be in an Open state\n\t * \t\t\t\t\t- Open state when not pending to get random winner, else in Closed state\n\t * \t\t\t\t\t- What if we need multiple states, introduce enums\n\t * \t\t\t\t\t\t- We will update and check the state when needed\n\t * @return upkeepNeeded Check result\n\t * @return\n\t */\n\tfunction checkUpkeep(\n\t\tbytes memory /* checkData */\n\t)\n\t\tpublic\n\t\toverride\n\t\treturns (bool upkeepNeeded, bytes memory /* performData */)\n\t{\n\t\t// Check open state\n\t\tbool isOpen = s_raffleState == RaffleState.OPEN;\n\n\t\t/** Check time\n\t\t * \t\tSolidity: block.timestamp\n\t\t * \t\t\tblock.timestamp - last block timestamp > interval\n\t\t */\n\t\tbool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\n\n\t\t// Check enough players\n\t\tbool hasPlayers = s_players.length > 0;\n\n\t\t// Check balance\n\t\tbool hasBalance = address(this).balance > 0;\n\n\t\tupkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\n\t}\n\n\t/**\n\t * @dev\n\t * Runs automatically\n\t *  \tVisibility: `external` -> Cheaper and only available to outside this contract\n\t *  \t\tSee (https://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number) src\n\t *  \t\t\t`requestRandomWords` need to call VRFCoordinator, so we need this as well, imported and tracked above\n\t */\n\tfunction performUpkeep(bytes calldata /* performData */) external override {\n\t\t(bool upkeepNeeded, ) = checkUpkeep(\"\");\n\t\tif (!upkeepNeeded) {\n\t\t\trevert Raffle__UpkeepNotNeeded(\n\t\t\t\taddress(this).balance,\n\t\t\t\ts_players.length,\n\t\t\t\tuint256(s_raffleState)\n\t\t\t);\n\t\t}\n\t\t/**\n\t\t * What to do:\n\t\t * \t\t1. Request the random num\n\t\t * \t\t2. Get(Fulfill) the random num\n\t\t * \t\t(Two txns, Reason for this: If only one txn, people can brute simulate calling the txn to try and manipulate the random num)\n\t\t */\n\n\t\t/**\n\t\t * In order to get random num, need these params\n\t\t */\n\t\ts_raffleState = RaffleState.CALCULATING; // Preventing entering and updating\n\t\tuint256 requestId = i_vrfCoordinator.requestRandomWords( // This function returns a request ID, defining who's requesting\n\t\t\ti_gasLane, // gasLane\n\t\t\ti_subscriptionId, // subscription ID to fund the request\n\t\t\tREQUEST_CONFIRMATIONS,\n\t\t\ti_callbackGasLimit,\n\t\t\tNUM_WORDS\n\t\t);\n\n\t\t// This is actually redundant for the Mock contract itself emits an event\n\t\temit RequestedRaffleWinner(requestId);\n\t}\n\n\t/**\n\t * @dev Will be overriding `fulfillRandomWords` from `VRFConsumerBaseV2`, so that VRFCoordinator knows that we can call `fulfillRandomWords`\n\t * @dev \t\tparam `requestId` commented to omit `param not used warning without breaking anything`\n\t */\n\tfunction fulfillRandomWords(\n\t\tuint256 /* requestId */,\n\t\tuint256[] memory randomWords\n\t) internal override {\n\t\t/*\n\t\t * The random word we get is a big int `2349578612398471289347129478129047129047129471298304` like\n\t\t * \t\tTo match with this, we can use modulo function to get a random num out of player array\n\t\t * \t\t`s_players` of size 10, random number: 202\n\t\t * \t\t\t202 % 10 -> 2, with this we can always get a number between 0 and 9\n\t\t */\n\t\tuint256 indexOfWinner = randomWords[0] % s_players.length;\n\t\taddress payable recentWinner = s_players[indexOfWinner];\n\t\ts_recentWinner = recentWinner;\n\t\ts_raffleState = RaffleState.OPEN; // Release lock\n\n\t\ts_players = new address payable[](0); // Reset\n\t\ts_lastTimeStamp = block.timestamp;\n\n\t\t// Send the money\n\t\t(bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n\t\tif (!success) {\n\t\t\trevert Raffle__TransferFailed();\n\t\t}\n\n\t\t// To keep track of winners, emit event\n\t\temit WinnerPicked(recentWinner);\n\t}\n\n\t/** View / Pure functions */\n\n\tfunction getEntranceFee() public view returns (uint256) {\n\t\treturn i_entranceFee;\n\t}\n\n\tfunction getInterval() public view returns (uint256) {\n\t\treturn i_interval;\n\t}\n\n\tfunction getPlayer(uint256 index) public view returns (address) {\n\t\treturn s_players[index];\n\t}\n\n\tfunction getRecentWinner() public view returns (address) {\n\t\treturn s_recentWinner;\n\t}\n\n\tfunction getRaffleState() public view returns (RaffleState) {\n\t\treturn s_raffleState;\n\t}\n\n\t/**\n\t * @dev Why can this be restricted to pure?\n\t * `NUM_WORDS` is a constant variable, so technically, this is not reading from `storage`\n\t */\n\tfunction getNumWords() public pure returns (uint256) {\n\t\treturn NUM_WORDS;\n\t\t// return 1; // Basically the same\n\t}\n\n\tfunction getNumberOfPlayers() public view returns (uint256) {\n\t\treturn s_players.length;\n\t}\n\n\tfunction getLatestTimestamp() public view returns (uint256) {\n\t\treturn s_lastTimeStamp;\n\t}\n\n\tfunction getRequestConfirmations() public pure returns (uint256) {\n\t\treturn REQUEST_CONFIRMATIONS;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}